{"ast":null,"code":"import { Query } from './Query';\nimport { Document } from './Document';\nimport { List } from './List';\nimport { trimPath, isPath, objectToQuery, restrictTo, compileOptions } from './utils';\nexport class Reference {\n  constructor(path, db) {\n    var _a;\n\n    this.db = db;\n    if (typeof path !== 'string') throw Error('The \"path\" argument should be a string'); // Normalize the path by removing slashes from\n    // the beginning or the end and trimming spaces.\n\n    path = trimPath(path);\n    this.id = (_a = path.split('/').pop()) !== null && _a !== void 0 ? _a : '';\n    this.path = path;\n    this.name = `${db.rootPath}/${path}`;\n    this.endpoint = `${db.endpoint}/${path}`;\n    this.isRoot = path === '';\n  }\n  /** Returns a reference to the parent document/collection */\n\n\n  get parent() {\n    if (this.isRoot) throw Error(\"Can't get the parent of root\");\n    return new Reference(this.path.replace(/\\/?([^/]+)\\/?$/, ''), this.db);\n  }\n  /** Returns a reference to the parent collection */\n\n\n  get parentCollection() {\n    if (this.isRoot) throw Error(\"Can't get parent of a root collection\");\n    if (this.isCollection) return new Reference(this.path.replace(/(\\/([^/]+)\\/?){2}$|^([^/]+)$/, ''), this.db);\n    return this.parent;\n  }\n  /** Returns true if this reference is a collection */\n\n\n  get isCollection() {\n    return isPath('col', this.path);\n  }\n  /** Returns a reference to the specified child path */\n\n\n  child(path) {\n    // Remove starting forward slash\n    path = path.replace(/^\\/?/, ''); // Return a newly created document with the new sub path.\n\n    return new Reference(`${this.path}/${path}`, this.db);\n  }\n\n  async transact(method, obj, options = {}) {\n    const tx = this.db.transaction();\n    const res = tx[method](this, obj, options);\n    return await tx.commit().then(() => res);\n  }\n  /** Returns all documents in the collection */\n\n\n  async list(options = {}) {\n    restrictTo('col', this);\n    return new List(await this.db.fetch(this.endpoint + objectToQuery(compileOptions(options))), this, options);\n  }\n  /** Returns the document of this reference. */\n\n\n  async get(options = {}) {\n    restrictTo('doc', this);\n    return new Document(await this.db.fetch(this.endpoint + objectToQuery(compileOptions(options))), this.db);\n  }\n  /** Create a new document with a randomly generated id */\n\n\n  async add(obj, options = {}) {\n    restrictTo('col', this);\n    return this.transact('add', obj, options);\n  }\n  /** Create a new document or overwrites an existing one matching this reference. */\n\n\n  async set(obj, options = {}) {\n    restrictTo('doc', this);\n    return this.transact('set', obj, options);\n  }\n  /** Updates a document while ignoring all missing fields in the provided object. */\n\n\n  async update(obj, options = {}) {\n    restrictTo('doc', this);\n    return this.transact('update', obj, options);\n  }\n  /** Deletes the referenced document from the database. */\n\n\n  async delete(options = {}) {\n    restrictTo('doc', this);\n    return this.transact('delete', options);\n  }\n  /** Queries the child documents/collections of this reference. */\n\n\n  query(options = {}) {\n    restrictTo('col', this);\n    return new Query(this.parent, {\n      from: {\n        collectionId: this.id\n      },\n      ...options\n    });\n  }\n\n  toJSON() {\n    return {\n      referenceValue: this.name\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/ana/Escritorio/EDUPLAN/telegram/proyecto-ana/proyecto/anny/node_modules/firebase-firestore-lite/dist/Reference.js"],"names":["Query","Document","List","trimPath","isPath","objectToQuery","restrictTo","compileOptions","Reference","constructor","path","db","_a","Error","id","split","pop","name","rootPath","endpoint","isRoot","parent","replace","parentCollection","isCollection","child","transact","method","obj","options","tx","transaction","res","commit","then","list","fetch","get","add","set","update","delete","query","from","collectionId","toJSON","referenceValue"],"mappings":"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","sourcesContent":["import { Query } from './Query';\nimport { Document } from './Document';\nimport { List } from './List';\nimport { trimPath, isPath, objectToQuery, restrictTo, compileOptions } from './utils';\nexport class Reference {\n    constructor(path, db) {\n        var _a;\n        this.db = db;\n        if (typeof path !== 'string')\n            throw Error('The \"path\" argument should be a string');\n        // Normalize the path by removing slashes from\n        // the beginning or the end and trimming spaces.\n        path = trimPath(path);\n        this.id = (_a = path.split('/').pop()) !== null && _a !== void 0 ? _a : '';\n        this.path = path;\n        this.name = `${db.rootPath}/${path}`;\n        this.endpoint = `${db.endpoint}/${path}`;\n        this.isRoot = path === '';\n    }\n    /** Returns a reference to the parent document/collection */\n    get parent() {\n        if (this.isRoot)\n            throw Error(\"Can't get the parent of root\");\n        return new Reference(this.path.replace(/\\/?([^/]+)\\/?$/, ''), this.db);\n    }\n    /** Returns a reference to the parent collection */\n    get parentCollection() {\n        if (this.isRoot)\n            throw Error(\"Can't get parent of a root collection\");\n        if (this.isCollection)\n            return new Reference(this.path.replace(/(\\/([^/]+)\\/?){2}$|^([^/]+)$/, ''), this.db);\n        return this.parent;\n    }\n    /** Returns true if this reference is a collection */\n    get isCollection() {\n        return isPath('col', this.path);\n    }\n    /** Returns a reference to the specified child path */\n    child(path) {\n        // Remove starting forward slash\n        path = path.replace(/^\\/?/, '');\n        // Return a newly created document with the new sub path.\n        return new Reference(`${this.path}/${path}`, this.db);\n    }\n    async transact(method, obj, options = {}) {\n        const tx = this.db.transaction();\n        const res = tx[method](this, obj, options);\n        return await tx.commit().then(() => res);\n    }\n    /** Returns all documents in the collection */\n    async list(options = {}) {\n        restrictTo('col', this);\n        return new List(await this.db.fetch(this.endpoint + objectToQuery(compileOptions(options))), this, options);\n    }\n    /** Returns the document of this reference. */\n    async get(options = {}) {\n        restrictTo('doc', this);\n        return new Document(await this.db.fetch(this.endpoint + objectToQuery(compileOptions(options))), this.db);\n    }\n    /** Create a new document with a randomly generated id */\n    async add(obj, options = {}) {\n        restrictTo('col', this);\n        return this.transact('add', obj, options);\n    }\n    /** Create a new document or overwrites an existing one matching this reference. */\n    async set(obj, options = {}) {\n        restrictTo('doc', this);\n        return this.transact('set', obj, options);\n    }\n    /** Updates a document while ignoring all missing fields in the provided object. */\n    async update(obj, options = {}) {\n        restrictTo('doc', this);\n        return this.transact('update', obj, options);\n    }\n    /** Deletes the referenced document from the database. */\n    async delete(options = {}) {\n        restrictTo('doc', this);\n        return this.transact('delete', options);\n    }\n    /** Queries the child documents/collections of this reference. */\n    query(options = {}) {\n        restrictTo('col', this);\n        return new Query(this.parent, {\n            from: {\n                collectionId: this.id\n            },\n            ...options\n        });\n    }\n    toJSON() {\n        return {\n            referenceValue: this.name\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}