{"ast":null,"code":"import has from 'lodash/has';\nimport isSchema from './util/isSchema';\nclass Condition {\n  constructor(refs, options) {\n    this.fn = void 0;\n    this.refs = refs;\n    this.refs = refs;\n    if (typeof options === 'function') {\n      this.fn = options;\n      return;\n    }\n    if (!has(options, 'is')) throw new TypeError('`is:` is required for `when()` conditions');\n    if (!options.then && !options.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');\n    let {\n      is,\n      then,\n      otherwise\n    } = options;\n    let check = typeof is === 'function' ? is : function () {\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n      return values.every(value => value === is);\n    };\n    this.fn = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      let options = args.pop();\n      let schema = args.pop();\n      let branch = check(...args) ? then : otherwise;\n      if (!branch) return undefined;\n      if (typeof branch === 'function') return branch(schema);\n      return schema.concat(branch.resolve(options));\n    };\n  }\n  resolve(base, options) {\n    let values = this.refs.map(ref => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));\n    let schema = this.fn.apply(base, values.concat(base, options));\n    if (schema === undefined || schema === base) return base;\n    if (!isSchema(schema)) throw new TypeError('conditions must return a schema object');\n    return schema.resolve(options);\n  }\n}\nexport default Condition;","map":{"version":3,"names":["has","isSchema","Condition","constructor","refs","options","fn","TypeError","then","otherwise","is","check","_len","arguments","length","values","Array","_key","every","value","_len2","args","_key2","pop","schema","branch","undefined","concat","resolve","base","map","ref","getValue","parent","context","apply"],"sources":["/home/ana/Documentos/proyectos-ana.github/E-commerce/new-ecomerce/node_modules/yup/es/Condition.js"],"sourcesContent":["import has from 'lodash/has';\nimport isSchema from './util/isSchema';\n\nclass Condition {\n  constructor(refs, options) {\n    this.fn = void 0;\n    this.refs = refs;\n    this.refs = refs;\n\n    if (typeof options === 'function') {\n      this.fn = options;\n      return;\n    }\n\n    if (!has(options, 'is')) throw new TypeError('`is:` is required for `when()` conditions');\n    if (!options.then && !options.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');\n    let {\n      is,\n      then,\n      otherwise\n    } = options;\n    let check = typeof is === 'function' ? is : (...values) => values.every(value => value === is);\n\n    this.fn = function (...args) {\n      let options = args.pop();\n      let schema = args.pop();\n      let branch = check(...args) ? then : otherwise;\n      if (!branch) return undefined;\n      if (typeof branch === 'function') return branch(schema);\n      return schema.concat(branch.resolve(options));\n    };\n  }\n\n  resolve(base, options) {\n    let values = this.refs.map(ref => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));\n    let schema = this.fn.apply(base, values.concat(base, options));\n    if (schema === undefined || schema === base) return base;\n    if (!isSchema(schema)) throw new TypeError('conditions must return a schema object');\n    return schema.resolve(options);\n  }\n\n}\n\nexport default Condition;"],"mappings":"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"},"metadata":{},"sourceType":"module"}