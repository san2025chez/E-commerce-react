{"ast":null,"code":"import { db } from '../firebase/firebase';\nimport { addDoc, collection, documentId, getDocs, where, query } from 'firebase/firestore';\nexport const getProducts = () => {\n  return new Promise((resolve, reject) => {\n    resolve(products);\n  });\n};\nexport const getProductById = id => {\n  const itemsCollection = collection(db, 'productos');\n  const item = itemsCollection.doc(id);\n  return item.get();\n};\n/* \nexport const  getProductById = (id) => {\n\n    return new Promise((resolve, reject) => {\n\n      setTimeout(() => {\n\n        let product = products.find(product => parseInt(product.id) === parseInt(id))\n\n  \n\n        if (product) {\n\n          resolve(product)\n\n        } else {\n\n          reject('El producto no existe')\n\n        }\n\n      }, 1000)\n\n    })\n\n  }\n */","map":{"version":3,"sources":["/home/ana/Escritorio/EDUPLAN/telegram/proyecto-ana/proyecto/anny/src/api/products.js"],"names":["db","addDoc","collection","documentId","getDocs","where","query","getProducts","Promise","resolve","reject","products","getProductById","id","itemsCollection","item","doc","get"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,sBAAjB;AACA,SAAQC,MAAR,EAAgBC,UAAhB,EAA2BC,UAA3B,EAAsCC,OAAtC,EAA+CC,KAA/C,EACEC,KADF,QACc,oBADd;AAIA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC9B,SAAQ,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AACnCD,IAAAA,OAAO,CAACE,QAAD,CAAP;AACH,GAFM,CAAR;AAGF,CAJM;AAMP,OAAO,MAAOC,cAAc,GAAIC,EAAD,IAAQ;AAEnC,QAAMC,eAAe,GAAGZ,UAAU,CAACF,EAAD,EAAI,WAAJ,CAAlC;AAEA,QAAMe,IAAI,GAAGD,eAAe,CAACE,GAAhB,CAAoBH,EAApB,CAAb;AACA,SAAOE,IAAI,CAACE,GAAL,EAAP;AACH,CANM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {db} from '../firebase/firebase'\nimport {addDoc, collection,documentId,getDocs, where,  \n  query} from 'firebase/firestore'\n\n\nexport const getProducts = () => {\n   return  new Promise((resolve,reject) => {\n        resolve(products)\n    })\n}\n\nexport const  getProductById = (id) => {\n  \n    const itemsCollection = collection(db,'productos')\n    \n    const item = itemsCollection.doc(id) \n    return item.get();\n}\n/* \nexport const  getProductById = (id) => {\n\n    return new Promise((resolve, reject) => {\n\n      setTimeout(() => {\n\n        let product = products.find(product => parseInt(product.id) === parseInt(id))\n\n  \n\n        if (product) {\n\n          resolve(product)\n\n        } else {\n\n          reject('El producto no existe')\n\n        }\n\n      }, 1000)\n\n    })\n\n  }\n */\n"]},"metadata":{},"sourceType":"module"}