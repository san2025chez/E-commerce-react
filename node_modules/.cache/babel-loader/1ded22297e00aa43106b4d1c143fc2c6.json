{"ast":null,"code":"import { encodeValue } from './utils';\n/** @private */\n\nfunction isNumber(v) {\n  return typeof v === 'number' && !isNaN(v - v);\n}\n/** @private */\n\n\nconst transformsMap = {\n  serverTimestamp: ['setToServerValue'],\n  increment: ['increment', isNumber],\n  max: ['maximum', isNumber],\n  min: ['minimum', isNumber],\n  appendToArray: ['appendMissingElements', Array.isArray],\n  removeFromArray: ['removeAllFromArray', Array.isArray]\n};\n/**\n * Represents a value that is the result of an operation\n * made by the Firebase server. For example `serverTimestamp`\n * can't be known in the client, as it evaluates in the server.\n */\n\nexport default class Transform {\n  /**\n   * @param value when applicable, the value will be used.\n   * for example when using `increment` the value will be the number to increment by.\n   */\n  constructor(name, value) {\n    if (!(name in transformsMap)) throw Error(`Invalid transform name: \"${name}\"`);\n    const [transformName, validator] = transformsMap[name];\n    if (validator && !validator(value)) throw Error(`The value for the transform \"${name}\" needs to be a${validator === isNumber ? ' number' : 'n array'}.`);\n    if (validator === Array.isArray) this[transformName] = encodeValue(value).arrayValue;else this[transformName] = name === 'serverTimestamp' ? 'REQUEST_TIME' : encodeValue(value);\n  }\n\n}","map":{"version":3,"sources":["/home/ana/Escritorio/EDUPLAN/telegram/proyecto-ana/proyecto/anny/node_modules/firebase-firestore-lite/dist/Transform.js"],"names":["encodeValue","isNumber","v","isNaN","transformsMap","serverTimestamp","increment","max","min","appendToArray","Array","isArray","removeFromArray","Transform","constructor","name","value","Error","transformName","validator","arrayValue"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA;;AACA,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;AACjB,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyB,CAACC,KAAK,CAACD,CAAC,GAAGA,CAAL,CAAtC;AACH;AACD;;;AACA,MAAME,aAAa,GAAG;AAClBC,EAAAA,eAAe,EAAE,CAAC,kBAAD,CADC;AAElBC,EAAAA,SAAS,EAAE,CAAC,WAAD,EAAcL,QAAd,CAFO;AAGlBM,EAAAA,GAAG,EAAE,CAAC,SAAD,EAAYN,QAAZ,CAHa;AAIlBO,EAAAA,GAAG,EAAE,CAAC,SAAD,EAAYP,QAAZ,CAJa;AAKlBQ,EAAAA,aAAa,EAAE,CAAC,uBAAD,EAA0BC,KAAK,CAACC,OAAhC,CALG;AAMlBC,EAAAA,eAAe,EAAE,CAAC,oBAAD,EAAuBF,KAAK,CAACC,OAA7B;AANC,CAAtB;AAQA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAME,SAAN,CAAgB;AAC3B;AACJ;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AACrB,QAAI,EAAED,IAAI,IAAIX,aAAV,CAAJ,EACI,MAAMa,KAAK,CAAE,4BAA2BF,IAAK,GAAlC,CAAX;AACJ,UAAM,CAACG,aAAD,EAAgBC,SAAhB,IAA6Bf,aAAa,CAACW,IAAD,CAAhD;AACA,QAAII,SAAS,IAAI,CAACA,SAAS,CAACH,KAAD,CAA3B,EACI,MAAMC,KAAK,CAAE,gCAA+BF,IAAK,kBAAiBI,SAAS,KAAKlB,QAAd,GAAyB,SAAzB,GAAqC,SAAU,GAAtG,CAAX;AACJ,QAAIkB,SAAS,KAAKT,KAAK,CAACC,OAAxB,EACI,KAAKO,aAAL,IAAsBlB,WAAW,CAACgB,KAAD,CAAX,CAAmBI,UAAzC,CADJ,KAGI,KAAKF,aAAL,IACIH,IAAI,KAAK,iBAAT,GAA6B,cAA7B,GAA8Cf,WAAW,CAACgB,KAAD,CAD7D;AAEP;;AAhB0B","sourcesContent":["import { encodeValue } from './utils';\n/** @private */\nfunction isNumber(v) {\n    return typeof v === 'number' && !isNaN(v - v);\n}\n/** @private */\nconst transformsMap = {\n    serverTimestamp: ['setToServerValue'],\n    increment: ['increment', isNumber],\n    max: ['maximum', isNumber],\n    min: ['minimum', isNumber],\n    appendToArray: ['appendMissingElements', Array.isArray],\n    removeFromArray: ['removeAllFromArray', Array.isArray]\n};\n/**\n * Represents a value that is the result of an operation\n * made by the Firebase server. For example `serverTimestamp`\n * can't be known in the client, as it evaluates in the server.\n */\nexport default class Transform {\n    /**\n     * @param value when applicable, the value will be used.\n     * for example when using `increment` the value will be the number to increment by.\n     */\n    constructor(name, value) {\n        if (!(name in transformsMap))\n            throw Error(`Invalid transform name: \"${name}\"`);\n        const [transformName, validator] = transformsMap[name];\n        if (validator && !validator(value))\n            throw Error(`The value for the transform \"${name}\" needs to be a${validator === isNumber ? ' number' : 'n array'}.`);\n        if (validator === Array.isArray)\n            this[transformName] = encodeValue(value).arrayValue;\n        else\n            this[transformName] =\n                name === 'serverTimestamp' ? 'REQUEST_TIME' : encodeValue(value);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}