{"ast":null,"code":"import { db } from '../firebase/firebase';\nimport { addDoc, collection, documentId, getDocs, where, query } from 'firebase/firestore';\nconst products = [{\n  id: 1,\n  productName: 'tea',\n  price: '34',\n  stock: 2\n}, {\n  id: 2,\n  productName: 'coffee',\n  price: '56',\n  stock: 2\n}, {\n  id: 3,\n  productName: 'queso',\n  price: '90',\n  stock: 2\n}];\nexport const getProducts = () => {\n  return new Promise((resolve, reject) => {\n    resolve(products);\n  });\n};\nexport const getProductById = id => {\n  const itemsCollection = collection('productos');\n  const item = itemsCollection.doc(id);\n  return item.get();\n};\n/* \nexport const  getProductById = (id) => {\n\n    return new Promise((resolve, reject) => {\n\n      setTimeout(() => {\n\n        let product = products.find(product => parseInt(product.id) === parseInt(id))\n\n  \n\n        if (product) {\n\n          resolve(product)\n\n        } else {\n\n          reject('El producto no existe')\n\n        }\n\n      }, 1000)\n\n    })\n\n  }\n */","map":{"version":3,"sources":["/home/ana/Escritorio/EDUPLAN/telegram/proyecto-ana/proyecto/anny/src/api/products.js"],"names":["db","addDoc","collection","documentId","getDocs","where","query","products","id","productName","price","stock","getProducts","Promise","resolve","reject","getProductById","itemsCollection","item","doc","get"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,sBAAjB;AACA,SAAQC,MAAR,EAAgBC,UAAhB,EAA2BC,UAA3B,EAAsCC,OAAtC,EAA+CC,KAA/C,EACEC,KADF,QACc,oBADd;AAEA,MAAMC,QAAQ,GAAG,CACb;AAACC,EAAAA,EAAE,EAAC,CAAJ;AAAMC,EAAAA,WAAW,EAAC,KAAlB;AAAwBC,EAAAA,KAAK,EAAC,IAA9B;AAAmCC,EAAAA,KAAK,EAAC;AAAzC,CADa,EAEb;AAACH,EAAAA,EAAE,EAAC,CAAJ;AAAMC,EAAAA,WAAW,EAAC,QAAlB;AAA2BC,EAAAA,KAAK,EAAC,IAAjC;AAAsCC,EAAAA,KAAK,EAAC;AAA5C,CAFa,EAGb;AAACH,EAAAA,EAAE,EAAC,CAAJ;AAAMC,EAAAA,WAAW,EAAC,OAAlB;AAA0BC,EAAAA,KAAK,EAAC,IAAhC;AAAqCC,EAAAA,KAAK,EAAC;AAA3C,CAHa,CAAjB;AAOA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC9B,SAAQ,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AACnCD,IAAAA,OAAO,CAACP,QAAD,CAAP;AACH,GAFM,CAAR;AAGF,CAJM;AAMP,OAAO,MAAOS,cAAc,GAAIR,EAAD,IAAQ;AAEnC,QAAMS,eAAe,GAAGf,UAAU,CAAC,WAAD,CAAlC;AAEA,QAAMgB,IAAI,GAAGD,eAAe,CAACE,GAAhB,CAAoBX,EAApB,CAAb;AACA,SAAOU,IAAI,CAACE,GAAL,EAAP;AACH,CANM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {db} from '../firebase/firebase'\nimport {addDoc, collection,documentId,getDocs, where,  \n  query} from 'firebase/firestore'\nconst products = [\n    {id:1,productName:'tea',price:'34',stock:2},\n    {id:2,productName:'coffee',price:'56',stock:2},\n    {id:3,productName:'queso',price:'90',stock:2}\n\n]\n\nexport const getProducts = () => {\n   return  new Promise((resolve,reject) => {\n        resolve(products)\n    })\n}\n\nexport const  getProductById = (id) => {\n  \n    const itemsCollection = collection('productos')\n    \n    const item = itemsCollection.doc(id) \n    return item.get();\n}\n/* \nexport const  getProductById = (id) => {\n\n    return new Promise((resolve, reject) => {\n\n      setTimeout(() => {\n\n        let product = products.find(product => parseInt(product.id) === parseInt(id))\n\n  \n\n        if (product) {\n\n          resolve(product)\n\n        } else {\n\n          reject('El producto no existe')\n\n        }\n\n      }, 1000)\n\n    })\n\n  }\n */\n"]},"metadata":{},"sourceType":"module"}